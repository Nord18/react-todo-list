{"version":3,"sources":["components/FormBox.js","components/TodoList.js","components/FilterTodos.js","App.js","serviceWorker.js","index.js"],"names":["FormBox","props","onSubmit","TextField","type","variant","className","fullWidth","label","value","onChange","Button","size","Todolist","todo","filter","map","index","List","key","id","ListItem","dense","button","onClick","doneTodo","ListItemIcon","Checkbox","checked","completed","edge","ListItemText","primary","title","ListItemSecondaryAction","deleteTodo","IconButton","aria-label","todoAll","todos","todoActive","todoCompleted","search","match","todoFind","FilterTodos","margin","searchTodo","allTodo","activeTodo","color","completedTodo","doneAllTodo","removeAllTodo","App","handleChange","evt","setState","target","handleSubmit","preventDefault","state","Math","random","alert","handleToggle","splice","length","Grid","justify","container","item","xs","this","TodoList","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80bc8c36.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport '../App.css';\r\n\r\nfunction FormBox(props) {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <TextField type=\"text\" variant=\"filled\" className=\"TextField\" fullWidth label=\"Enter new task\" value={props.value} onChange={props.onChange} />\r\n      <Button type=\"submit\" size=\"large\" variant=\"contained\">Add</Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default FormBox","import React from 'react';\r\nimport '../App.css';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction Todolist(props) {\r\n\r\n  const todo = (filter) => {\r\n    return filter.map((todo, index) =>\r\n      <List key={todo.id}>\r\n        <ListItem dense button onClick={() => props.doneTodo(todo.id)}>\r\n          <ListItemIcon>\r\n            <Checkbox checked={todo.completed} edge=\"start\"/>\r\n          </ListItemIcon>\r\n          <ListItemText primary={todo.title} />\r\n          <ListItemSecondaryAction onClick={() => props.deleteTodo(index)}>\r\n            <IconButton edge=\"end\" aria-label=\"delete\">\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n  };\r\n\r\n  const todoAll = todo(props.todos);\r\n\r\n  const active = props.todos.filter(todo => {\r\n    return !todo.completed\r\n  });\r\n\r\n  const todoActive = todo(active);\r\n\r\n  const completed = props.todos.filter(todo => {\r\n    return todo.completed\r\n  });\r\n\r\n  const todoCompleted = todo(completed);\r\n\r\n  const search = props.todos.filter(todo => {\r\n    return todo.title.match(props.search);\r\n  });\r\n\r\n  const todoFind = todo(search);\r\n\r\n  if (props.filter === 'all') {\r\n    return (\r\n      <div>\r\n        {todoAll}\r\n      </div>\r\n    )\r\n  } else if (props.filter === 'active') {\r\n    return (\r\n      <div>\r\n        {todoActive}\r\n      </div>\r\n    )\r\n  } else if (props.filter === 'completed') {\r\n    return (\r\n      <div>\r\n        {todoCompleted}\r\n      </div>\r\n    )\r\n  } else if (props.filter === 'search') {\r\n    return (\r\n      <div>\r\n        {todoFind}\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Todolist","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport '../App.css';\r\n\r\nfunction FilterTodos(props) {\r\n  return (\r\n    <div className=\"FilterTodos\">\r\n      <div className=\"left\">\r\n        <TextField className=\"search-field\" margin=\"dense\" type=\"text\" variant=\"outlined\" label=\"Search todo\" value={props.search} onChange={props.searchTodo} />\r\n        <Button onClick={props.allTodo} variant=\"contained\">All</Button>\r\n        <Button className=\"btn-filter\" onClick={props.activeTodo} variant=\"contained\" color=\"primary\">Active</Button>\r\n        <Button onClick={props.completedTodo} variant=\"contained\" color=\"secondary\">Completed</Button>\r\n      </div>\r\n      <div className=\"right\">\r\n        <Button onClick={props.doneAllTodo} className=\"btn-done\" variant=\"outlined\">Done all</Button>\r\n        <Button onClick={props.removeAllTodo} className=\"btn-remove\" variant=\"outlined\">Remove all</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FilterTodos","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport './App.css';\nimport FormBox from './components/FormBox'\nimport TodoList from './components/TodoList'\nimport FilterTodos from './components/FilterTodos'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      search: '',\n      filter: 'all',\n      todos: [\n        {\n          title: 'Learn React',\n          id: Math.random(),\n          completed: true\n        }\n      ]\n    }\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      value: evt.target.value\n    })\n  };\n\n  searchTodo = (evt) => {\n    this.setState({\n      search: evt.target.value,\n      filter: 'search'\n    })\n  };\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (this.state.value !== '') {\n      const todos = [...this.state.todos, {\n        title: this.state.value,\n        id: Math.random(),\n        completed: false\n      }];\n  \n      this.setState(state => ({\n        todos,\n        value: ''\n      }))\n    } else {\n      alert('Type task name')\n    }\n  };\n\n  handleToggle = (id) => {\n    const todos = [...this.state.todos];\n\n    todos.map(todo => {\n      if (todo.id === id) {\n        return todo.completed = !todo.completed\n      } else {\n        return todo\n      }\n    });\n\n    this.setState(state => ({\n      todos\n    }))\n  };\n\n  deleteTodo = (index) => {\n    const todos = [...this.state.todos];\n\n    todos.splice(index, 1);\n\n    this.setState(state => ({\n      todos\n    }))\n  };\n\n  activeTodo = () => {\n    this.setState({\n      filter: 'active'\n    })\n  };\n\n  completedTodo = () => {\n    this.setState({\n      filter: 'completed'\n    })\n  };\n\n  allTodo = () => {\n    this.setState({\n      filter: 'all'\n    })\n  };\n\n  doneAllTodo = () => {\n    const doneAllTodo = [...this.state.todos];\n\n    doneAllTodo.map(todo => {\n      return todo.completed = true\n    });\n\n    this.setState(state => ({\n      todos: doneAllTodo\n    }))\n  };\n\n  removeAllTodo = () => {\n    const todos = [...this.state.todos];\n\n    todos.splice(0, todos.length);\n\n    this.setState(state => ({\n      todos\n    }))\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid className=\"Header\" justify=\"center\" container>\n          <Grid item xs={11}>\n            <h1 className=\"Title\">My to-do react app</h1>\n            <FormBox value={this.state.value} onSubmit={this.handleSubmit} onChange={this.handleChange} />\n          </Grid>\n        </Grid>\n        <TodoList search={this.state.search} filter={this.state.filter} todos={this.state.todos} doneTodo={this.handleToggle} deleteTodo={this.deleteTodo} />\n        <FilterTodos todos={this.state.todos} removeAllTodo={this.removeAllTodo} doneAllTodo={this.doneAllTodo} searchTodo={this.searchTodo} value={this.state.search} allTodo={this.allTodo} completedTodo={this.completedTodo} activeTodo={this.activeTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}